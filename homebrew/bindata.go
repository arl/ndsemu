// Code generated by go-bindata.
// sources:
// dldi/fcsr.dldi
// DO NOT EDIT!

package homebrew

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)
type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dldiFcsrDldi = []byte("\xed\xa5\x8d\xbf Chishm\x00\x01\r\x0e\x00FlashCartSRam\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\xbf\xe0\x06\x80\xbf\x80\x00\x80\xbf\x80\x00\x80\xbf\xc0\x06\x80\xbf\xe0\x06\x80\xbf\xe0\x06\x80\xbf\x14\a\x80\xbfFCSR\x13\x00\x00\x00\x9c\x02\x80\xbf\x04\x02\x80\xbf \x01\x80\xbf\x88\x00\x80\xbf\x80\x00\x80\xbf\x90\x00\x80\xbf\x01\x00\xa0\xe3\x1e\xff/\xe1\x00\x00\xa0\xe3\x1e\xff/\xe1\x00D-\xe9p\xa0\x9f\xe5\n\xa0\x8f\xe0\xf7\xff\xff\xeb\x00\x00P\xe3\x00\xe0\xa0\xe3\x15\x00\x00\n\\0\x9f\xe5\x03\xc0\x9a\xe7X0\x9f\xe5X \x9f\xe5\x03\x10\x9a\xe7T0\x9f\xe5\x02\x00\x9a\xe7\x03 \x9a\xe7\f\xe0\x81\xe5\x00\xe0\x82\xe5\f\xe0\x8c\xe5\x00\xe0\x8c\xe5\x00\xe0\x81\xe5\x04\xe0\x8c\xe5\x04\xe0\x81\xe5\b\xe0\x8c\xe5\b\xe0\x81\xe5\f\xe0\x80\xe5\x00\xe0\x80\xe5\x04\xe0\x80\xe5\b\xe0\x80\xe5\x01\x00\xa0\xe3\x00D\xbd\xe8\x1e\xff/\xe1 \x06\x00\x00\x18\x00\x00\x00\x14\x00\x00\x00\x1c\x00\x00\x00\f\x00\x00\x00\xf0D-\xe9\u0120\x9f\xe5\xc4p\x9f\xe5\xc40\x9f\xe5\n\xa0\x8f\xe0\x03\xe0\x9a\xe7\a\xc0\x9a\xe7\x01P\xa0\xe1\x81D\xa0\xe1\x02`\xa0\xe1\x00\x10\xa0\xe3\x000\x9c\xe5\x03\x00P\xe1\x02\x00\x00:\x00 \x9e\xe5\x02\x00P\xe1\x0e\x00\x00:\x01\x10\x81\xe2\x04\x00Q\xe3\x04\xc0\x8c\xe2\x04\xe0\x8e\xe2\xf4\xff\xff\x1a|0\x9f\xe5\x03 \x9a\xe7\x00\x10\x92\xe5\x04 \xa0\xe1\x80\x14\x81\xe0\x06\x00\xa0\xe1\xd1\x00\x00\xeb\x01\x00\xa0\xe3\xf0D\xbd\xe8\x1e\xff/\xe1\x000\x85\xe0\x03\x00R\xe1\x00\x00\xa03\xf9\xff\xff:\a0\x9a\xe7D \x9f\xe5\x01\xc1\x93\xe7\x020\x9a\xe7\x00\x00T\xe3\x01!\x93\xe7\xf1\xff\xff\n\x000l\xe0\x83\x04\x82\xe0\x00 \xa0\xe3\x010\xd0\xe4\x060\xc2\xe7\x01 \x82\xe2\x04\x00R\xe1\xfa\xff\xff\x1a\xe8\xff\xff\xea\x88\x05\x00\x00\x1c\x00\x00\x00\x14\x00\x00\x00\f\x00\x00\x00\x18\x00\x00\x00pD-\u9020\x9f\xe5\x02C\xa0\xe3|`\x9f\xe5\n\xa0\x8f\xe0\x04\xd0M\xe2\x01L\x84\xe2\x00\x00\x00\xea\x01L\x84\xe2\x00 \x94\xe5d0\x9f\xe5\n\x04T\xe3\x00P\xa0#\x01P\xa03\x03\x00R\xe1\n\x04T\x13\xf6\xff\xff:\x06\x00\x9a\xe7\x04\x10\x84\xe2\f \xa0\xe3\xc7\x00\x00\xeb\x00\x00P\xe3\x00\x00\xa0\x13\x01\x00\x05\x02\x00\x00P\xe3\x04\x00\x00\x1a\x02L\x84\xe2\n\x04T\xe3\xeb\xff\xff:\x00\x00\xa0\xe3\x00\x00\x00\xea\x01\x00\xa0\xe3\x04\u040d\xe2pD\xbd\xe8\x1e\xff/\xe1\xa4\x04\x00\x00\x10\x00\x00\x00FCSR\xf0O-\xe9\x18\xa2\x9f\xe5\x02C\xa0\xe3\x14b\x9f\xe5\n\xa0\x8f\xe0\x1c\xd0M\xe2\x01L\x84\xe2\x00\x00\x00\xea\x01L\x84\xe2\x00 \x94\xe5\xfc1\x9f\xe5\n\x04T\xe3\x00P\xa0#\x01P\xa03\x03\x00R\xe1\n\x04T\x13\xf6\xff\xff:\x06\x00\x9a\xe7\x04\x10\x84\xe2\f \xa0\xe3\xa1\x00\x00\xeb\x00\x00P\xe3\x00\x00\xa0\x13\x01\x00\x05\x02\x00\x00P\xe3\x03\x00\x00\x1a\x02L\x84\xe2\n\x04T\xe3\xeb\xff\xff:]\x00\x00\xea\xb0a\x9f\xe5\xb01\x9f\u5c31\x9f\xe5\x06 \x9a\xe7\x040\x8d\xe5\x03\x10\x9a\xe7\x01<D\xe2\v\xe0\x9a\xe7\x000\x82\xe5\x04\xc0\xa0\xe1\x00\x00\xa0\xe3\bp\x8d\xe2\x100\x9c\xe5\x040\x8e\xe4  \x9c\xe5\a \x80\xe7\x04\x00\x80\xe2\x020\x83\xe0\x10\x00P\xe3\x040\x81\xe4\x04\xc0\x8c\xe2\xf5\xff\xff\x1ad\xc1\x9f\xe5\n4\xa0\xe3\f \x9a\xe7\x040\x83\xe2\x000\x82\xe5\x02\x00\xa0\xe1\x00\x10\xa0\xe3\a \x91\xe7\x000\x90\xe5\x04\x10\x81\xe2\x824\x83\xe0\f\x00Q\xe3\x040\xa0\xe5\xf8\xff\xff\x1a\n$\xa0\xe3\x000\xd2\xe5F\x00S\xe38\x00\x00\n\n\x14\xa0\xe3R0\xa0\xe3\x030\xc1\xe5F \xa0\xe3\x0f0C\xe2\x00 \xc1\xe5\x010\xc1\xe5\r \x82\xe2\xf00\x9f\xe5\x02 \xc1\xe5\x03\x90\x9a\xe7\x040\x9d\xe5\v@\x9a\xe7\fP\x9a\xe7\x06`\x9a\xe7\x03\xe0\x9a\xe7\x04\x80\xa0\xe1\x000\x96\xe5\x00\x10\x94\xe5\x00 \x9e\xe5\x81\x14\x83\xe0\x82$\x83\xe0\x02\x00Q\xe1\x00\x00\x95\xe5\a\x00\x00*\t\xc0\xa0\xe1\x010\xd1\xe4\x010\xc0\xe4\x00 \x9e\xe5\x000\x9c\xe5\x824\x83\xe0\x01\x00S\xe1\xf8\xff\xff\x8a\x04@\x84\xe2\x100\x88\xe2\x03\x00T\xe1\x04P\x85\xe2\x04\xe0\x8e\xe2\xe9\xff\xff\x1a\x040\x9d\xe5\v\x00\x9a\xe7\x03\x10\x9a\xe7\x00 \xa0\xe3\x00\xc0\xe0\xe3\a0\x92\xe7\x04 \x82\xe2\x00\x00S\xe3\x00\xc0\x80\x05\x00\xc0\x81\x05\x10\x00R\xe3\x04\x00\x80\xe2\x04\x10\x81\xe2\xf6\xff\xff\x1a\x01\x00\xa0\xe3\x1c\u040d\xe2\xf0O\xbd\xe8\x1e\xff/\xe1\x010\xd2\xe5C\x00S\xe3\xc3\xff\xff\x1a\x020\xd2\xe5S\x00S\xe3\xc0\xff\xff\x1a\x030\xd2\xe5R\x00S\xe3\xbd\xff\xff\x1a\xe3\xff\xff\xea\f\x04\x00\x00\x10\x00\x00\x00FCSR\f\x00\x00\x00\x14\x00\x00\x00\x1c\x00\x00\x00\x18\x00\x00\x00\x0f\x00R\xe3\x04\xe0-\xe5\x00\xc0\xa0\xe1\x02\xe0\xa0\xe1\x02\x00\x00\x9a\x000\x81\xe1\x03\x00\x13\xe3\t\x00\x00\n\x00\x00^\xe3\x05\x00\x00\n\x00 \xa0\xe3\x010\xd1\xe4\f0\xc2\xe7\x01 \x82\xe2\x0e\x00R\xe1\xfa\xff\xff\x1a\x04\xe0\x9d\xe4\x1e\xff/\xe1\x000\x91\xe5\x000\x8c\xe5\x04 \x91\xe5\x04 \x8c\xe5\b0\x91\xe5\b0\x8c\xe5\x10\xe0N\xe2\f0\x91\xe5\x0f\x00^\xe3\f0\x8c\xe5\x10\x10\x81\xe2\x10\xc0\x8c\xe2\xf2\xff\xff\x8a\x03\x00^\xe3\xe6\xff\xff\x9a\x04\xe0N\xe2\x040\x91\xe4\x03\x00^\xe3\x040\x8c\xe4\xfa\xff\xff\x8a\xe0\xff\xff\xea\x00\x00R\xe3\x10@-\xe9\x00\xc0\xa0\xe1C\x00\x00\n\x010\x80\xe1\x03\x00\x13\xe3*\x00\x00\x1a\x03\x00R\xe3\x00@\xa0\xe1\x01\xe0\xa0\xe1$\x00\x00\x9a\x00\x00\x90\xe5\x000\x91\xe5\x03\x00P\xe1 \x00\x00\x1a\x04 R\xe26\x00\x00\n\xff4\x80\xe2\x018C\xe2\x01<C\xe2\x010C\xe2\u007f4\xc3\xe3\u007f8\xc3\xe3\u007f<\xc3\xe3\u007f0\xc3\xe3\x00\x00\xd3\xe1\x10\x00\x00\n+\x00\x00\xea\x00\x00\x94\xe5\xff4\x80\xe2\x018C\xe2\x01<C\xe2\x010C\xe2\u007f\x14\xc3\xe3\x000\x9e\xe5\u007f\x18\xc1\xe3\u007f\x1c\xc1\xe3\x03\x00P\xe1\u007f\x10\xc1\xe3\a\x00\x00\x1a\x04 R\xe2\x1d\x00\x00\n\x00\x00\xd1\xe1\x1b\x00\x00\x1a\x03\x00R\xe3\x04@\x84\xe2\x04\xe0\x8e\xe2\xeb\xff\xff\x8a\x04\xc0\xa0\xe1\x0e\x10\xa0\xe1\x01\xe0R\xe2\x16\x00\x00:\x000\xdc\xe5\x00\x00\xd1\xe5\x03\x00P\xe1\x14\x00\x00\x1a\x00\x00^\xe3\v\x00\x00\x1a\f\x00\x00\xea\x01\x00R\xe3\x01\xc0\x8c\xe2\x01\x10\x81\xe2\v\x00\x00\n\x00\x00\xd1\xe5\x000\xdc\xe5\x03\x00P\xe1\t\x00\x00\x1a\x02\x00R\xe3\x01 B\xe2\x01\x00\x00\n\x00\x00P\xe3\xf2\xff\xff\x1a\x00\x00\xa0\xe3\x10@\xbd\xe8\x1e\xff/\xe1\x000\xdc\xe5\x00\x00\xd1\xe5\x03\x00`\xe0\xf9\xff\xff\xea Chishm FAT\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\x06\x80\xbf\xb4\x06\x80\xbf\x04\a\x80\xbf\xe4\x06\x80\xbf\xf4\x06\x80\xbf")

func dldiFcsrDldiBytes() ([]byte, error) {
	return _dldiFcsrDldi, nil
}

func dldiFcsrDldi() (*asset, error) {
	bytes, err := dldiFcsrDldiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dldi/fcsr.dldi", size: 1760, mode: os.FileMode(420), modTime: time.Unix(1462667225, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"dldi/fcsr.dldi": dldiFcsrDldi,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"dldi": &bintree{nil, map[string]*bintree{
		"fcsr.dldi": &bintree{dldiFcsrDldi, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

